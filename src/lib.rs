use std::path::{Component, Path};

use serde::{de::DeserializeOwned, Deserialize};

use tokio::time::{sleep, Duration};
use tokio_stream::StreamExt;

use tonic::{
    transport::{Certificate, Channel, ClientTlsConfig, Endpoint, Identity, Uri},
    IntoRequest,
};

use typed_builder::TypedBuilder;

use proto::*;
mod proto;

/// Client configuration for the Velociraptor gRPC API
#[allow(dead_code)]
#[derive(Deserialize)]
pub struct APIClientConfig {
    ca_certificate: String,
    client_cert: String,
    client_private_key: String,
    api_connection_string: String,
    name: String,
}

impl APIClientConfig {
    /// Construct client configuration from YAML file as generated by
    /// `velociraptor config api_client --name $NAME $OUT_FILE`
    pub fn from_yaml_file<P: AsRef<Path>>(path: &P) -> Result<Self, Box<dyn std::error::Error>> {
        let cc = serde_yaml::from_reader(std::fs::File::open(path)?)?;
        Ok(cc)
    }

    fn tls_config(&self) -> ClientTlsConfig {
        let ca = Certificate::from_pem(self.ca_certificate.clone());
        let id = Identity::from_pem(self.client_cert.clone(), self.client_private_key.clone());
        ClientTlsConfig::new()
            .domain_name("VelociraptorServer")
            .ca_certificate(ca)
            .identity(id)
    }
}

/// APIClient for the Velociraptor gRPC API
pub struct APIClient {
    endpoint: Endpoint,
}

impl TryFrom<&APIClientConfig> for APIClient {
    type Error = Box<dyn std::error::Error>;
    fn try_from(cfg: &APIClientConfig) -> Result<Self, Self::Error> {
        let uri = Uri::builder()
            .scheme("https")
            .authority(cfg.api_connection_string.as_str())
            .path_and_query("/")
            .build()?;
        let endpoint = Endpoint::from(uri).tls_config(cfg.tls_config())?;
        Ok(Self { endpoint })
    }
}

/// Options for the `query` method
#[derive(TypedBuilder)]
pub struct QueryOptions {
    /// Envirnment variables to be passed along with the query
    #[builder(default, setter(into))]
    env: Vec<(String, String)>,
    /// Organization ID
    #[builder(default, setter(into))]
    org_id: Option<String>,
    /// Maximum rows to return at a time
    #[builder(default)]
    max_row: u64,
}

impl APIClient {
    async fn api_client(
        &self,
    ) -> Result<api_client::ApiClient<Channel>, Box<dyn std::error::Error>> {
        Ok(api_client::ApiClient::new(self.endpoint.connect().await?))
    }

    /// Issue a server-side VQL query
    pub async fn query<T: DeserializeOwned>(
        &self,
        query: &str,
        options: &QueryOptions,
    ) -> Result<Vec<T>, Box<dyn std::error::Error>> {
        let env = options
            .env
            .iter()
            .cloned()
            .map(|(key, value)| VqlEnv { key, value })
            .collect::<Vec<_>>();
        let org_id = options.org_id.clone().unwrap_or_default();
        let query = vec![VqlRequest {
            name: "".into(),
            vql: query.into(),
        }];
        let max_row = options.max_row;

        let mut response = self
            .api_client()
            .await?
            .query(
                VqlCollectorArgs {
                    env,
                    org_id,
                    max_row,
                    query,
                    ..VqlCollectorArgs::default()
                }
                .into_request(),
            )
            .await?
            .into_inner();

        let mut result = vec![];
        while let Some(Ok(msg)) = response.next().await {
            if !msg.response.is_empty() {
                log::trace!("result = {}", &msg.response);
                result.append(&mut serde_json::from_str(&msg.response)?);
            }
            if !msg.log.is_empty() {
                log::debug!("log = {}", msg.log.to_string().trim());
                if msg.log.starts_with("VQL Error:") {
                    return Err(msg.log.into());
                }
            }
        }

        Ok(result)
    }

    /// Fetch downloadable file from Velociraptor server
    pub async fn fetch<P: AsRef<Path>>(
        &self,
        path: P,
    ) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        let components: Vec<_> = path
            .as_ref()
            .components()
            .filter_map(|c| match c {
                Component::Normal(s) => Some(s.to_string_lossy().to_string()),
                _ => None,
            })
            .collect();

        let request = VfsFileBuffer {
            components,
            length: 1024,
            ..VfsFileBuffer::default()
        };

        let mut api_client = self.api_client().await?;
        let (mut buf, mut offset) = (vec![], 0);
        loop {
            let response = api_client
                .vfs_get_buffer(
                    VfsFileBuffer {
                        offset,
                        ..request.clone()
                    }
                    .into_request(),
                )
                .await?
                .into_inner();

            match response.data.len() {
                0 => break,
                len => {
                    buf.extend(response.data);
                    offset += len as u64;
                }
            };
        }
        Ok(buf)
    }

    pub async fn schedule_client_flow(
        &self,
        client_id: &str,
        artifact: &str,
        cmd: &str,
    ) -> Result<String, Box<dyn std::error::Error>> {
        #[derive(Deserialize)]
        struct Request {
            flow_id: String,
        }
        #[derive(Deserialize)]
        struct Submit {
            request: Request,
        }

        let env = vec![
            ("client_id".to_string(), client_id.to_string()),
            ("artifact".to_string(), artifact.to_string()),
            ("Command".to_string(), cmd.to_string()),
        ];
        let requests: Vec<Submit> = self
            .query(
                r#"SELECT
               collect_client(client_id=client_id,
                              artifacts=artifact,
                              env=dict(Command=Command))
               AS request
               FROM scope()"#,
                &QueryOptions::builder()
                    .env(env.as_slice())
                    .org_id("".to_string())
                    .build(),
            )
            .await?;
        Ok(requests[0].request.flow_id.clone())
    }

    pub async fn fetch_client_flow<T: DeserializeOwned>(
        &self,
        client_id: &str,
        flow_id: &str,
    ) -> Result<Vec<T>, Box<dyn std::error::Error>> {
        #[derive(Clone, Default, Deserialize)]
        struct FlowStatus {
            state: String, // UNSET, RUNNING, FINISHED, ERROR
        }

        let options = QueryOptions::builder()
            .env(vec![
                ("client_id".into(), client_id.into()),
                ("flow_id".into(), flow_id.into()),
            ])
            .org_id("".to_string())
            .build();

        loop {
            log::debug!("Looking for {} / {} ...", client_id, flow_id);
            let status = self
                .query::<FlowStatus>(
                    r#"SELECT * from flows(client_id = client_id, flow_id = flow_id)"#,
                    &options,
                )
                .await?;
            let state = status.get(0).cloned().unwrap_or_default().state;
            log::debug!("state( {client_id} , {flow_id} ): {state}");
            if state != "RUNNING" {
                break;
            }
            sleep(Duration::from_millis(100)).await;
        }

        loop {
            log::debug!("trying to fetch result for {client_id} , {flow_id}");
            let result = self
                .query::<T>(
                    r#"SELECT * from flow_results(client_id = client_id, flow_id = flow_id)"#,
                    &options,
                )
                .await?;
            if !result.is_empty() {
                log::debug!("done!");
                return Ok(result);
            }
            log::debug!("sleep...");
            sleep(Duration::from_millis(100)).await;
        }
    }

    pub async fn fetch_client_flow_log(
        &self,
        client_id: &str,
        flow_id: &str,
    ) -> Result<Vec<FlowLog>, Box<dyn std::error::Error>> {
        let options = QueryOptions::builder()
            .env(vec![
                ("client_id".into(), client_id.into()),
                ("flow_id".into(), flow_id.into()),
            ])
            .org_id("".to_string())
            .build();
        let mut result: Vec<FlowLog>;
        loop {
            result = self
                .query(
                    r#"SELECT * from flow_logs(client_id = client_id, flow_id = flow_id)"#,
                    &options,
                )
                .await?;
            if result.is_empty() {
                sleep(Duration::from_millis(100)).await;
                log::debug!("Retrying...");
            } else {
                for r in &result {
                    log::debug!(
                        "flow_log({client_id}/{flow_id}): {} {}: {}",
                        r.client_time,
                        r.level,
                        r.message
                    );
                }
                return Ok(result);
            }
        }
    }
}

#[derive(Deserialize)]
pub struct FlowLog {
    pub client_time: u64,
    pub level: String,
    pub message: String,
}
